#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/util/loadedfile'
require 'puppet/parser/lexer'
require 'puppet/parser/ast'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Parser
    class Parser < Racc::Parser

module_eval(<<'...end grammar.ra/module_eval...', 'grammar.ra', 789)

# It got too annoying having code in a file that needs to be compiled.
require 'puppet/parser/parser_support'

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end grammar.ra/module_eval...
##### State transition tables begin ###

racc_action_table = [
   242,   243,    55,    68,    71,   299,   157,    55,    78,   117,
   199,    68,    71,   181,   186,  -169,    36,   112,   341,   113,
    38,    55,   177,   179,   182,   185,   170,    10,    68,    71,
   231,   158,   114,   292,   293,   356,   257,   368,    68,    71,
    59,   198,   100,    61,   103,    59,   180,   184,    61,   198,
   189,   172,   173,   174,   176,   178,   111,   183,   187,    59,
    95,    66,    61,    60,   175,    79,   253,   154,    60,    88,
   345,    66,   233,   229,   139,    79,    81,   231,    84,    88,
    68,    71,    60,   225,    74,    99,    68,    71,    84,    60,
   100,    90,   103,   203,   203,   292,   293,   223,   296,    60,
   203,   117,   231,    78,   202,   202,   295,   240,    95,   209,
   209,   202,   166,    66,   186,   170,   209,    79,   253,    66,
   241,    88,   177,    79,    81,   334,   139,    88,    68,    71,
    84,   310,    74,    99,    68,    71,    84,   357,   100,    90,
   103,    60,   183,   187,   311,   358,   307,    60,   308,   175,
   189,   172,   173,   174,   176,   178,    95,   183,   187,    36,
   309,    66,   288,    38,   175,    79,   253,    66,   218,    88,
    10,    79,    81,   219,   139,    88,   338,   312,    84,   336,
    74,    99,    68,    71,    84,   218,   100,    90,   103,    60,
   219,   173,   174,   217,   285,    60,   183,   187,   257,   284,
   203,    68,    71,   175,    95,   100,    36,   103,    68,    71,
   127,   202,   100,   316,   103,    66,   209,    10,    15,    79,
    81,   173,   174,    88,   183,   187,   183,   187,    74,    99,
    95,   175,    84,   175,    66,    90,   113,   338,    79,    81,
   336,    66,    88,    60,   213,    79,    81,    74,   319,    88,
   216,    84,    68,    71,    74,    99,   213,    49,    84,    68,
    71,    90,    60,   100,   215,   103,    47,    48,   287,    60,
   154,   286,   189,   172,   173,   174,   324,    68,    71,   183,
   187,   100,   213,   103,    36,    66,   175,   327,    38,    79,
   253,   314,    66,    88,   200,    10,    79,    81,   139,    95,
    88,  -171,    84,    68,    71,    74,   330,    78,   170,    84,
    66,  -172,   259,    60,    79,    81,   257,   258,    88,  -173,
    60,  -168,  -170,    74,    99,    70,   228,    84,    68,    71,
    90,    36,   100,  -167,   103,   127,    66,  -167,    60,   161,
    79,    81,    10,    15,    88,  -169,  -171,   297,    72,    74,
    95,   257,   258,    84,    68,    71,    36,  -172,   100,  -168,
    38,    66,   112,  -170,    60,    79,    81,    10,    15,    88,
   -22,   -22,   -22,   -22,    74,    99,    68,    71,    84,   290,
   100,    90,   103,   292,   293,  -167,   167,    66,   166,    60,
   335,    79,   253,   229,  -187,    88,   339,    68,    71,   161,
   139,   100,    49,   103,    84,    43,    44,    40,    41,    66,
   234,  -169,  -174,    79,    81,    60,   156,    88,   154,    68,
    71,   354,    74,   100,   122,   103,    84,   122,   359,   161,
    66,    60,  -170,    53,    79,    81,   229,    60,    88,   366,
    68,    71,    52,    74,   100,  -168,   103,    84,    43,    44,
    40,    41,    66,   232,    51,   373,    79,    81,    60,   374,
    88,  -169,    95,  -167,  -170,    74,    68,    71,  -168,    84,
   100,  -172,   103,    66,    60,   376,    45,    79,    81,  -222,
    60,    88,   -24,   -24,   -24,   -24,    74,    99,    95,   234,
    84,   379,   238,    90,    39,   384,    68,    71,   385,    66,
   100,    60,   103,    79,    81,   nil,   nil,    88,   nil,   nil,
   nil,   nil,    74,    99,   nil,   nil,    84,   nil,    95,    90,
   nil,   nil,    68,    71,   nil,   nil,   100,    60,   103,    66,
   nil,   nil,   nil,    79,    81,   nil,   nil,    88,   nil,   nil,
   nil,   nil,    74,    99,    95,   nil,    84,   nil,   nil,    90,
   nil,   nil,    68,    71,   nil,    66,   100,    60,   103,    79,
    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,
   nil,   nil,    84,   nil,    95,    90,   nil,   nil,    68,    71,
   nil,   nil,   100,    60,   103,    66,   nil,   nil,   nil,    79,
    81,   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,
    95,   nil,    84,   nil,   nil,    90,   nil,   nil,    68,    71,
   nil,    66,   100,    60,   103,    79,    81,   nil,   nil,    88,
   nil,   nil,   nil,   nil,    74,    99,   nil,   nil,    84,   nil,
    95,    90,   nil,   nil,    68,    71,   nil,   nil,   100,    60,
   103,    66,   nil,   nil,   nil,    79,    81,   nil,   nil,    88,
    68,    71,   nil,   nil,    74,    99,    68,    71,    84,   nil,
   100,    90,   103,   nil,   nil,   nil,   nil,    66,   nil,    60,
   nil,    79,    81,   nil,   nil,    88,   nil,   nil,    95,   nil,
    74,    68,    71,    66,    84,   100,   nil,    79,   253,    66,
   nil,    88,   nil,    79,    81,    60,   139,    88,   nil,   nil,
    84,   nil,    74,    99,   nil,   nil,    84,    68,    71,    90,
   nil,    60,   nil,   nil,    66,   nil,   nil,    60,    79,   144,
   nil,   nil,    88,   nil,   nil,   nil,   nil,   139,    68,    71,
   nil,    84,   100,   nil,   103,   nil,   nil,   nil,   nil,   nil,
    66,   nil,    60,   nil,    79,   253,    68,    71,    88,   nil,
   100,   nil,   103,   139,   nil,   nil,   nil,    84,   nil,   nil,
   nil,    66,   nil,   nil,   nil,    79,    81,   nil,    60,    88,
   nil,    68,    71,   nil,    74,   nil,   nil,   nil,    84,    66,
   nil,   nil,   nil,    79,    81,   nil,   nil,    88,   nil,    60,
   nil,   nil,    74,   nil,   261,   nil,    84,    68,    71,   nil,
   nil,   100,   nil,   103,    66,   nil,   nil,    60,    79,    81,
   nil,   nil,    88,   nil,   nil,   nil,    72,    74,    68,    71,
   nil,    84,   100,   nil,   103,   nil,   nil,   nil,   nil,   nil,
    66,   nil,    60,   nil,    79,    81,   nil,   nil,    88,   nil,
    95,   nil,   nil,    74,    68,    71,   nil,    84,   nil,   nil,
   nil,    66,   nil,   nil,   nil,    79,    81,   nil,    60,    88,
   nil,   nil,   nil,   nil,    74,    99,   nil,   162,    84,    68,
    71,    90,   nil,   100,   nil,   103,   nil,    66,   nil,    60,
   nil,    79,    81,   nil,   nil,    88,   nil,   nil,   nil,    72,
    74,    95,   nil,   nil,    84,    68,    71,   nil,   nil,   100,
   nil,   103,    66,   nil,   nil,    60,    79,    81,   nil,   nil,
    88,   nil,   nil,   nil,   nil,    74,    99,    95,   nil,    84,
    68,    71,    90,   nil,   100,   nil,   103,   nil,    66,   nil,
    60,   nil,    79,    81,    68,    71,    88,   nil,   nil,   nil,
   255,    74,    99,   nil,   nil,    84,   nil,   nil,    90,   nil,
   nil,   nil,   nil,    66,   nil,   nil,    60,    79,    81,    68,
    71,    88,   nil,   100,   nil,   103,    74,    66,   nil,   nil,
    84,    79,   253,   nil,   nil,    88,   nil,   nil,    68,    71,
   139,    60,   nil,   nil,    84,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    66,   nil,   nil,    60,    79,    81,   nil,   nil,
    88,   328,   nil,    68,    71,    74,   nil,   nil,   nil,    84,
   nil,    66,   nil,   nil,   nil,    79,    81,   nil,   nil,    88,
    60,    68,    71,    72,    74,   100,   193,   103,    84,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    66,   nil,   nil,    60,
    79,   253,    68,    71,    88,   nil,   100,   nil,   103,   139,
   nil,   nil,   nil,    84,    66,   nil,   nil,   nil,    79,    81,
   nil,   nil,    88,   nil,    60,   nil,   nil,    74,    68,    71,
   nil,    84,   100,   nil,   103,    66,   nil,   nil,   nil,    79,
    81,   nil,    60,    88,   nil,   nil,   nil,   nil,    74,   nil,
    95,   nil,    84,   nil,    68,    71,   nil,   nil,   100,   nil,
   103,    66,   nil,    60,   nil,    79,    81,   nil,   nil,    88,
   nil,   nil,   nil,   nil,    74,    99,    95,   nil,    84,    68,
    71,    90,   nil,   100,   nil,   103,   nil,    66,   nil,    60,
   nil,    79,    81,    68,    71,    88,   nil,   nil,   nil,   nil,
    74,    99,   nil,   nil,    84,   nil,   nil,    90,   nil,   nil,
   nil,   nil,    66,   nil,   nil,    60,    79,    81,   nil,   nil,
    88,   nil,   nil,   nil,   nil,    74,    66,   nil,   nil,    84,
    79,    81,   nil,   nil,    88,   nil,   nil,   nil,    72,    74,
    60,    68,    71,    84,   nil,   100,   nil,   103,   189,   172,
   173,   174,   176,   178,    60,   183,   187,   nil,   189,   172,
   173,   174,   175,    95,   nil,   183,   187,    68,    71,   nil,
   nil,   100,   175,   103,    66,   nil,   nil,   nil,    79,    81,
   nil,   nil,    88,   nil,   nil,   nil,   nil,    74,    99,    95,
   nil,    84,   nil,   nil,    90,   nil,   nil,    68,    71,   nil,
    66,   100,    60,   103,    79,    81,   nil,   nil,    88,   nil,
   nil,   nil,   nil,    74,    99,   nil,   nil,    84,   nil,    95,
    90,   nil,   nil,    68,    71,   nil,   nil,   100,    60,   103,
    66,   nil,   nil,   nil,    79,    81,   nil,   nil,    88,   nil,
   nil,   nil,   nil,    74,    99,    95,   nil,    84,   nil,   nil,
    90,   nil,   nil,   nil,   nil,   nil,    66,   nil,    60,   nil,
    79,    81,   188,   nil,    88,   nil,   nil,   nil,   nil,    74,
    99,   181,   186,    84,   nil,   nil,    90,   nil,   nil,   nil,
   177,   179,   182,   185,    60,   nil,   181,   186,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   177,   179,   182,   185,   nil,
   nil,   nil,   nil,   nil,   180,   184,   nil,   nil,   189,   172,
   173,   174,   176,   178,   nil,   183,   187,   nil,   nil,   180,
   184,   nil,   175,   189,   172,   173,   174,   176,   178,   nil,
   183,   187,   181,   186,   nil,   nil,   nil,   175,   nil,   nil,
   283,   177,   179,   182,   185,   nil,   nil,   181,   186,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   177,   179,   182,   185,
   nil,   nil,   nil,   nil,   nil,   180,   184,   nil,   nil,   189,
   172,   173,   174,   176,   178,   nil,   183,   187,   nil,   nil,
   nil,   184,   nil,   175,   189,   172,   173,   174,   176,   178,
   nil,   183,   187,   181,   186,   nil,   nil,   nil,   175,   nil,
   nil,   nil,   177,   179,   182,   185,   nil,   nil,   181,   186,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177,   179,   182,
   185,   nil,   nil,   nil,   nil,   nil,   180,   184,   nil,   nil,
   189,   172,   173,   174,   176,   178,   nil,   183,   187,   nil,
   nil,   180,   184,   nil,   175,   189,   172,   173,   174,   176,
   178,   nil,   183,   187,   181,   186,   nil,   nil,   nil,   175,
   nil,   nil,   nil,   177,   179,   182,   185,   nil,   nil,    26,
   186,    32,     1,   nil,     8,    11,   nil,    18,   177,    23,
   nil,    29,   nil,     2,   nil,   nil,    10,    15,   nil,   186,
   nil,   189,   172,   173,   174,   176,   178,   177,   183,   187,
   nil,   nil,   nil,   nil,   186,   175,   189,   172,   173,   174,
   176,   178,   177,   183,   187,   nil,   nil,   nil,   nil,   nil,
   175,   nil,   nil,   nil,   nil,   189,   172,   173,   174,   176,
   178,   nil,   183,   187,   281,   nil,   nil,   nil,   nil,   175,
   189,   172,   173,   174,   176,   178,   nil,   183,   187,   nil,
   nil,   nil,   nil,   377,   175,    26,   nil,    32,     1,   nil,
     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,
   nil,   nil,    10,    15,    26,   364,    32,     1,   nil,     8,
    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,   nil,
   nil,    10,    15,   nil,   383,   nil,    26,   nil,    32,     1,
   nil,     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,
     2,   nil,   nil,    10,    15,    26,   306,    32,     1,   nil,
     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,     2,
   nil,   nil,    10,    15,   nil,   381,   nil,    26,   nil,    32,
     1,   nil,     8,    11,   nil,    18,   nil,    23,   nil,    29,
   nil,     2,   nil,   nil,    10,    15,    26,   326,    32,     1,
   nil,     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,
     2,   nil,   nil,    10,    15,   nil,   nil,   nil,    26,   nil,
    32,     1,   nil,     8,    11,   nil,    18,   nil,    23,   nil,
    29,   nil,     2,   nil,   nil,    10,    15,    26,   nil,    32,
     1,   nil,     8,    11,   nil,    18,   nil,    23,   nil,    29,
   nil,     2,   nil,   nil,    10,    15,    26,   nil,    32,     1,
   nil,     8,    11,   nil,    18,   nil,    23,   nil,    29,   nil,
     2,   nil,   nil,    10,    15,   189,   172,   173,   174,   176,
   178,   nil,   183,   187,   nil,   nil,   nil,   nil,   nil,   175 ]

racc_action_check = [
   164,   164,    18,   103,   103,   214,    56,   157,    81,    32,
   103,   286,   286,   164,   164,   136,    11,    27,   286,    27,
    11,   158,   164,   164,   164,   164,    81,    11,   300,   300,
   154,    56,    27,   214,   214,   300,   332,   332,   189,   189,
    18,   103,   189,    18,   189,   157,   164,   164,   157,   286,
   164,   164,   164,   164,   164,   164,    27,   164,   164,   158,
   189,   300,   158,    18,   164,   300,   300,   200,   157,   300,
   294,   189,   154,   212,   300,   189,   189,   213,   300,   189,
   369,   369,   158,   134,   189,   189,   186,   186,   189,   300,
   186,   189,   186,   203,   291,   294,   294,   133,   206,   189,
   111,   216,   144,   127,   203,   291,   206,   163,   186,   203,
   291,   111,   262,   369,   273,   144,   111,   369,   369,   186,
   163,   369,   273,   186,   186,   262,   369,   186,   357,   357,
   369,   221,   186,   186,   185,   185,   186,   302,   185,   186,
   185,   369,   264,   264,   221,   302,   218,   186,   219,   264,
   273,   273,   273,   273,   273,   273,   185,   273,   273,     1,
   220,   357,   197,     1,   273,   357,   357,   185,   122,   357,
     1,   185,   185,   122,   357,   185,   281,   224,   357,   281,
   185,   185,   176,   176,   185,   310,   176,   185,   176,   357,
   310,   282,   282,   121,   192,   185,   282,   282,   192,   192,
   114,   175,   175,   282,   176,   175,    46,   175,   336,   336,
    46,   114,   336,   227,   336,   176,   114,    46,    46,   176,
   176,   263,   263,   176,   265,   265,   263,   263,   176,   176,
   336,   265,   176,   263,   175,   176,   119,   335,   175,   175,
   335,   336,   175,   176,   229,   336,   336,   175,   230,   336,
   116,   175,   215,   215,   336,   336,   232,     8,   336,   330,
   330,   336,   175,   330,   115,   330,     8,     8,   194,   336,
   234,   194,   267,   267,   267,   267,   235,   184,   184,   267,
   267,   184,   113,   184,   225,   215,   267,   239,   225,   215,
   215,   225,   330,   215,   110,   225,   330,   330,   215,   184,
   330,   108,   215,    23,    23,   330,   250,    23,   253,   330,
   184,   107,   169,   215,   184,   184,   169,   169,   184,   106,
   330,   105,   102,   184,   184,    23,   140,   184,    26,    26,
   184,    42,    26,   141,    26,    42,    23,   101,   184,    96,
    23,    23,    42,    42,    23,    94,    89,   211,    23,    23,
    26,   211,   211,    23,   228,   228,    33,    87,   228,    85,
    33,    26,    83,    82,    23,    26,    26,    33,    33,    26,
    31,    31,    31,    31,    26,    26,    29,    29,    26,   201,
    29,    26,    29,   201,   201,    80,    77,   228,    75,    26,
   280,   228,   228,   142,    74,   228,   284,   308,   308,    69,
   228,   308,    66,   308,   228,     6,     6,     6,     6,    29,
   289,    65,    64,    29,    29,   228,    53,    29,    52,   307,
   307,   298,    29,   307,    50,   307,    29,    37,   305,   138,
   308,   187,   143,    17,   308,   308,   321,    29,   308,   325,
   174,   174,    13,   308,   174,   146,   174,   308,     3,     3,
     3,     3,   307,   147,    12,   338,   307,   307,   308,   343,
   307,   347,   174,   348,   350,   307,   179,   179,   351,   307,
   179,   352,   179,   174,   183,   358,     5,   174,   174,   368,
   307,   174,     4,     4,     4,     4,   174,   174,   179,   155,
   174,   370,   159,   174,     2,   380,   173,   173,   382,   179,
   173,   174,   173,   179,   179,   nil,   nil,   179,   nil,   nil,
   nil,   nil,   179,   179,   nil,   nil,   179,   nil,   173,   179,
   nil,   nil,    45,    45,   nil,   nil,    45,   179,    45,   173,
   nil,   nil,   nil,   173,   173,   nil,   nil,   173,   nil,   nil,
   nil,   nil,   173,   173,    45,   nil,   173,   nil,   nil,   173,
   nil,   nil,   172,   172,   nil,    45,   172,   173,   172,    45,
    45,   nil,   nil,    45,   nil,   nil,   nil,   nil,    45,    45,
   nil,   nil,    45,   nil,   172,    45,   nil,   nil,    47,    47,
   nil,   nil,    47,    45,    47,   172,   nil,   nil,   nil,   172,
   172,   nil,   nil,   172,   nil,   nil,   nil,   nil,   172,   172,
    47,   nil,   172,   nil,   nil,   172,   nil,   nil,    48,    48,
   nil,    47,    48,   172,    48,    47,    47,   nil,   nil,    47,
   nil,   nil,   nil,   nil,    47,    47,   nil,   nil,    47,   nil,
    48,    47,   nil,   nil,    49,    49,   nil,   nil,    49,    47,
    49,    48,   nil,   nil,   nil,    48,    48,   nil,   nil,    48,
   296,   296,   nil,   nil,    48,    48,   177,   177,    48,   nil,
   177,    48,   177,   nil,   nil,   nil,   nil,    49,   nil,    48,
   nil,    49,    49,   nil,   nil,    49,   nil,   nil,   177,   nil,
    49,    51,    51,   296,    49,    51,   nil,   296,   296,   177,
   nil,   296,   nil,   177,   177,    49,   296,   177,   nil,   nil,
   296,   nil,   177,   177,   nil,   nil,   177,   295,   295,   177,
   nil,   296,   nil,   nil,    51,   nil,   nil,   177,    51,    51,
   nil,   nil,    51,   nil,   nil,   nil,   nil,    51,   231,   231,
   nil,    51,   231,   nil,   231,   nil,   nil,   nil,   nil,   nil,
   295,   nil,    51,   nil,   295,   295,   233,   233,   295,   nil,
   233,   nil,   233,   295,   nil,   nil,   nil,   295,   nil,   nil,
   nil,   231,   nil,   nil,   nil,   231,   231,   nil,   295,   231,
   nil,   170,   170,   nil,   231,   nil,   nil,   nil,   231,   233,
   nil,   nil,   nil,   233,   233,   nil,   nil,   233,   nil,   231,
   nil,   nil,   233,   nil,   170,   nil,   233,   288,   288,   nil,
   nil,   288,   nil,   288,   170,   nil,   nil,   233,   170,   170,
   nil,   nil,   170,   nil,   nil,   nil,   170,   170,   182,   182,
   nil,   170,   182,   nil,   182,   nil,   nil,   nil,   nil,   nil,
   288,   nil,   170,   nil,   288,   288,   nil,   nil,   288,   nil,
   182,   nil,   nil,   288,    70,    70,   nil,   288,   nil,   nil,
   nil,   182,   nil,   nil,   nil,   182,   182,   nil,   288,   182,
   nil,   nil,   nil,   nil,   182,   182,   nil,    70,   182,    71,
    71,   182,   nil,    71,   nil,    71,   nil,    70,   nil,   182,
   nil,    70,    70,   nil,   nil,    70,   nil,   nil,   nil,    70,
    70,    71,   nil,   nil,    70,   180,   180,   nil,   nil,   180,
   nil,   180,    71,   nil,   nil,    70,    71,    71,   nil,   nil,
    71,   nil,   nil,   nil,   nil,    71,    71,   180,   nil,    71,
   112,   112,    71,   nil,   112,   nil,   112,   nil,   180,   nil,
    71,   nil,   180,   180,   167,   167,   180,   nil,   nil,   nil,
   167,   180,   180,   nil,   nil,   180,   nil,   nil,   180,   nil,
   nil,   nil,   nil,   112,   nil,   nil,   180,   112,   112,    78,
    78,   112,   nil,    78,   nil,    78,   112,   167,   nil,   nil,
   112,   167,   167,   nil,   nil,   167,   nil,   nil,   240,   240,
   167,   112,   nil,   nil,   167,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    78,   nil,   nil,   167,    78,    78,   nil,   nil,
    78,   240,   nil,   255,   255,    78,   nil,   nil,   nil,    78,
   nil,   240,   nil,   nil,   nil,   240,   240,   nil,   nil,   240,
    78,   100,   100,   240,   240,   100,   100,   100,   240,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   240,
   255,   255,   260,   260,   255,   nil,   260,   nil,   260,   255,
   nil,   nil,   nil,   255,   100,   nil,   nil,   nil,   100,   100,
   nil,   nil,   100,   nil,   255,   nil,   nil,   100,   181,   181,
   nil,   100,   181,   nil,   181,   260,   nil,   nil,   nil,   260,
   260,   nil,   100,   260,   nil,   nil,   nil,   nil,   260,   nil,
   181,   nil,   260,   nil,    90,    90,   nil,   nil,    90,   nil,
    90,   181,   nil,   260,   nil,   181,   181,   nil,   nil,   181,
   nil,   nil,   nil,   nil,   181,   181,    90,   nil,   181,   161,
   161,   181,   nil,   161,   nil,   161,   nil,    90,   nil,   181,
   nil,    90,    90,   166,   166,    90,   nil,   nil,   nil,   nil,
    90,    90,   nil,   nil,    90,   nil,   nil,    90,   nil,   nil,
   nil,   nil,   161,   nil,   nil,    90,   161,   161,   nil,   nil,
   161,   nil,   nil,   nil,   nil,   161,   166,   nil,   nil,   161,
   166,   166,   nil,   nil,   166,   nil,   nil,   nil,   166,   166,
   161,    95,    95,   166,   nil,    95,   nil,    95,   277,   277,
   277,   277,   277,   277,   166,   277,   277,   nil,   269,   269,
   269,   269,   277,    95,   nil,   269,   269,   178,   178,   nil,
   nil,   178,   269,   178,    95,   nil,   nil,   nil,    95,    95,
   nil,   nil,    95,   nil,   nil,   nil,   nil,    95,    95,   178,
   nil,    95,   nil,   nil,    95,   nil,   nil,    99,    99,   nil,
   178,    99,    95,    99,   178,   178,   nil,   nil,   178,   nil,
   nil,   nil,   nil,   178,   178,   nil,   nil,   178,   nil,    99,
   178,   nil,   nil,   242,   242,   nil,   nil,   242,   178,   242,
    99,   nil,   nil,   nil,    99,    99,   nil,   nil,    99,   nil,
   nil,   nil,   nil,    99,    99,   242,   nil,    99,   nil,   nil,
    99,   nil,   nil,   nil,   nil,   nil,   242,   nil,    99,   nil,
   242,   242,    91,   nil,   242,   nil,   nil,   nil,   nil,   242,
   242,    91,    91,   242,   nil,   nil,   242,   nil,   nil,   nil,
    91,    91,    91,    91,   242,   nil,   129,   129,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   129,   129,   129,   129,   nil,
   nil,   nil,   nil,   nil,    91,    91,   nil,   nil,    91,    91,
    91,    91,    91,    91,   nil,    91,    91,   nil,   nil,   129,
   129,   nil,    91,   129,   129,   129,   129,   129,   129,   nil,
   129,   129,   190,   190,   nil,   nil,   nil,   129,   nil,   nil,
   190,   190,   190,   190,   190,   nil,   nil,   271,   271,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   271,   271,   271,   271,
   nil,   nil,   nil,   nil,   nil,   190,   190,   nil,   nil,   190,
   190,   190,   190,   190,   190,   nil,   190,   190,   nil,   nil,
   nil,   271,   nil,   190,   271,   271,   271,   271,   271,   271,
   nil,   271,   271,   131,   131,   nil,   nil,   nil,   271,   nil,
   nil,   nil,   131,   131,   131,   131,   nil,   nil,   132,   132,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,   132,   132,
   132,   nil,   nil,   nil,   nil,   nil,   131,   131,   nil,   nil,
   131,   131,   131,   131,   131,   131,   nil,   131,   131,   nil,
   nil,   132,   132,   nil,   131,   132,   132,   132,   132,   132,
   132,   nil,   132,   132,   275,   275,   nil,   nil,   nil,   132,
   nil,   nil,   nil,   275,   275,   275,   275,   nil,   nil,   279,
   276,   279,   279,   nil,   279,   279,   nil,   279,   276,   279,
   nil,   279,   nil,   279,   nil,   nil,   279,   279,   nil,   270,
   nil,   275,   275,   275,   275,   275,   275,   270,   275,   275,
   nil,   nil,   nil,   nil,   272,   275,   276,   276,   276,   276,
   276,   276,   272,   276,   276,   nil,   nil,   nil,   nil,   nil,
   276,   nil,   nil,   nil,   nil,   270,   270,   270,   270,   270,
   270,   nil,   270,   270,   188,   nil,   nil,   nil,   nil,   270,
   272,   272,   272,   272,   272,   272,   nil,   272,   272,   nil,
   nil,   nil,   nil,   363,   272,   188,   nil,   188,   188,   nil,
   188,   188,   nil,   188,   nil,   188,   nil,   188,   nil,   188,
   nil,   nil,   188,   188,   363,   312,   363,   363,   nil,   363,
   363,   nil,   363,   nil,   363,   nil,   363,   nil,   363,   nil,
   nil,   363,   363,   nil,   376,   nil,   312,   nil,   312,   312,
   nil,   312,   312,   nil,   312,   nil,   312,   nil,   312,   nil,
   312,   nil,   nil,   312,   312,   376,   217,   376,   376,   nil,
   376,   376,   nil,   376,   nil,   376,   nil,   376,   nil,   376,
   nil,   nil,   376,   376,   nil,   373,   nil,   217,   nil,   217,
   217,   nil,   217,   217,   nil,   217,   nil,   217,   nil,   217,
   nil,   217,   nil,   nil,   217,   217,   373,   238,   373,   373,
   nil,   373,   373,   nil,   373,   nil,   373,   nil,   373,   nil,
   373,   nil,   nil,   373,   373,   nil,   nil,   nil,   238,   nil,
   238,   238,   nil,   238,   238,   nil,   238,   nil,   238,   nil,
   238,   nil,   238,   nil,   nil,   238,   238,    20,   nil,    20,
    20,   nil,    20,    20,   nil,    20,   nil,    20,   nil,    20,
   nil,    20,   nil,   nil,    20,    20,     0,   nil,     0,     0,
   nil,     0,     0,   nil,     0,   nil,     0,   nil,     0,   nil,
     0,   nil,   nil,     0,     0,   268,   268,   268,   268,   268,
   268,   nil,   268,   268,   nil,   nil,   nil,   nil,   nil,   268 ]

racc_action_pointer = [
  1726,   123,   450,   384,   418,   461,   341,   nil,   251,   nil,
   nil,   -20,   446,   434,   nil,   nil,   nil,   433,     0,   nil,
  1707,   nil,   nil,   301,   nil,   nil,   326,    11,   nil,   374,
   nil,   306,     7,   320,   nil,   nil,   nil,   403,   nil,   nil,
   nil,   nil,   295,   nil,   nil,   520,   170,   576,   606,   632,
   400,   679,   378,   416,   nil,   nil,    -6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   389,   388,   396,   nil,   nil,   393,
   842,   867,   nil,   nil,   388,   376,   nil,   363,   957,   nil,
   362,     2,   340,   356,   nil,   336,   nil,   334,   nil,   323,
  1092,  1294,   nil,   nil,   322,  1179,   333,   nil,   nil,  1235,
  1019,   314,   299,     1,   nil,   298,   296,   288,   278,   nil,
   286,    76,   918,   242,   176,   256,   238,   nil,   nil,   228,
   nil,   185,   133,   nil,   nil,   nil,   nil,    97,   nil,  1309,
   nil,  1416,  1431,    90,    46,   nil,    -8,   nil,   423,   nil,
   285,   310,   381,   409,    91,   nil,   422,   433,   nil,   nil,
   nil,   nil,   nil,   nil,    19,   477,   nil,     5,    19,   484,
   nil,  1117,   nil,    95,    -4,   nil,  1131,   932,   nil,   305,
   769,   nil,   550,   494,   438,   199,   180,   654,  1205,   464,
   893,  1066,   816,   411,   275,   132,    84,   368,  1565,    36,
  1355,   nil,   187,   nil,   259,   nil,   nil,   151,   nil,   nil,
    27,   333,   nil,    69,   nil,   nil,    80,   nil,   nil,   nil,
   nil,   340,    61,    66,   -17,   250,    99,  1647,   131,   133,
   135,   119,   nil,   nil,   169,   248,   nil,   204,   352,   204,
   239,   726,   216,   744,   230,   267,   nil,   nil,  1688,   280,
   976,   nil,  1261,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   295,   nil,   nil,   284,   nil,  1001,   nil,   nil,   nil,   nil,
  1040,   nil,   100,   165,    81,   163,   nil,   218,  1721,  1144,
  1511,  1370,  1526,    96,   nil,  1477,  1492,  1134,   nil,  1479,
   381,   145,   135,   nil,   389,   nil,     9,   nil,   795,   398,
   nil,    70,   nil,   nil,    45,   705,   648,   nil,   412,   nil,
    26,   nil,   125,   nil,   nil,   419,   nil,   417,   395,   nil,
   150,   nil,  1606,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   424,   nil,   nil,   nil,   430,   nil,   nil,   nil,   nil,
   257,   nil,    25,   nil,   nil,   206,   206,   nil,   447,   nil,
   nil,   nil,   nil,   450,   nil,   nil,   nil,   438,   440,   nil,
   441,   445,   448,   nil,   nil,   nil,   nil,   126,   467,   nil,
   nil,   nil,   nil,  1584,   nil,   nil,   nil,   nil,   470,    78,
   482,   nil,   nil,  1666,   nil,   nil,  1625,   nil,   nil,   nil,
   486,   nil,   489,   nil,   nil,   nil ]

racc_action_default = [
  -198,  -235,   -51,   -19,    -8,  -235,  -235,    -9,  -235,   -10,
  -189,  -190,  -235,   -23,   -11,  -187,   -12,  -235,  -235,   -13,
    -1,   -14,    -2,  -188,   -15,    -3,  -235,  -235,   -16,  -235,
   -17,    -6,  -235,  -235,   -18,    -7,  -190,  -198,  -188,   -52,
   -27,   -28,  -235,   -25,   -26,  -235,  -235,  -235,  -235,  -235,
  -198,   -86,   -93,  -235,  -197,  -195,  -198,  -191,  -193,  -194,
  -223,  -196,    -4,   -42,  -233,   -43,  -215,  -176,  -118,   -44,
  -235,  -235,   -45,   -34,   -75,   -32,   -33,  -235,  -235,  -123,
   -37,   -74,   -38,  -235,   -73,   -39,  -173,   -40,  -175,   -41,
  -235,  -235,  -126,  -108,  -104,  -235,  -112,  -133,  -113,  -235,
  -235,  -105,  -109,  -235,  -111,  -106,  -115,  -107,  -114,  -110,
   -54,  -198,  -235,   -86,  -198,  -235,  -180,  -177,  -178,  -235,
   -50,  -235,  -199,  -200,   -24,   -21,   -23,  -188,   -22,   -84,
   -20,   -83,   -85,  -235,  -198,   -79,   -76,   -87,   -82,   -75,
   -71,   -77,  -221,   -80,   -74,   -69,   -78,  -235,  -172,  -171,
   -81,   -91,   -92,   -94,  -235,  -221,   386,  -235,  -235,  -235,
  -209,  -235,   -31,  -235,  -235,  -119,  -235,  -235,   -96,  -235,
  -235,  -143,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,
  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,  -235,
  -235,  -150,  -235,  -218,  -235,  -231,  -227,  -235,  -230,  -226,
   -93,  -235,  -215,  -198,   -58,   -60,  -235,   -67,   -57,   -74,
   -66,  -235,  -221,  -235,  -235,  -235,  -235,  -235,  -208,  -206,
  -235,  -235,  -203,  -232,  -235,  -235,  -211,  -235,   -72,  -222,
  -235,  -235,   -86,  -235,  -222,  -235,  -192,  -210,  -235,  -235,
  -235,   -29,  -235,  -121,  -120,   -36,   -35,  -174,  -169,  -167,
  -235,  -170,  -161,   -74,  -168,  -235,  -162,  -219,  -220,  -124,
  -235,  -117,  -235,  -138,  -140,  -139,  -134,  -141,  -145,  -142,
  -147,  -152,  -149,  -146,  -135,  -151,  -148,  -144,  -136,    -5,
  -235,  -129,  -137,  -153,  -220,  -216,  -235,  -224,  -235,  -221,
   -55,  -235,   -63,   -62,  -235,  -235,  -235,  -125,  -235,   -56,
  -235,  -155,  -235,  -159,  -179,  -235,  -182,  -235,  -235,  -201,
  -235,  -202,  -235,  -213,  -214,  -212,   -46,   -70,   -88,   -47,
   -89,  -221,   -90,   -95,   -49,  -235,  -186,  -234,   -30,  -122,
  -235,  -164,  -221,   -97,  -116,  -129,  -235,  -128,  -235,  -217,
  -228,  -225,  -229,  -235,   -59,   -61,  -102,   -98,   -99,   -64,
  -103,  -100,  -101,   -65,   -48,  -156,  -154,  -235,  -235,  -181,
  -207,  -205,  -204,  -235,  -184,   -68,  -185,  -166,  -220,  -235,
  -235,  -127,  -130,  -235,   -53,  -160,  -235,  -183,  -165,  -163,
  -235,  -132,  -235,  -158,  -131,  -157 ]

racc_goto_table = [
    27,    13,    20,   222,    89,    92,   115,    37,    62,     5,
    65,   196,   256,   145,   230,   150,   118,    50,   155,   301,
    27,    13,   246,    75,    73,    57,   133,   235,   201,     5,
   250,   214,   149,   119,   337,   165,   121,   344,   136,    69,
   169,   120,    27,   126,   142,    22,    27,   126,   300,   134,
   128,    89,    63,   151,   128,   168,   125,    65,   280,   124,
   130,    42,   192,   124,    46,   349,   353,   138,   244,    87,
   163,    73,   252,   369,   211,   332,   323,   168,   303,   116,
   135,   140,   123,   224,   298,    56,    69,   305,   371,   168,
   195,   159,   227,   237,   220,   123,   246,   148,   221,    63,
   331,   160,   110,   315,   355,   194,   212,    17,   325,   nil,
   nil,    86,   nil,   nil,   nil,   nil,    87,   nil,   250,   nil,
   294,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,    86,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    89,   149,   nil,
   nil,    89,   266,    65,   248,   nil,   nil,    65,    86,   nil,
   nil,   343,   nil,   303,   236,   nil,   289,   245,   nil,   nil,
   262,    73,   nil,   nil,   nil,    82,   247,   nil,   nil,   226,
   nil,   nil,    69,   nil,   nil,   nil,    69,   nil,    27,    13,
   317,   362,   150,   365,   340,    63,   149,     5,   nil,    63,
   304,   151,   248,   143,   370,    85,   329,   nil,   320,   149,
   322,   nil,    87,   148,   378,   136,    87,    27,    13,   nil,
   375,    89,    82,   nil,   247,   321,     5,    65,   nil,    54,
   318,   313,   250,   146,   nil,   151,   149,   333,    27,    13,
   nil,   245,   248,   380,   138,   nil,   382,     5,   nil,   nil,
   nil,   nil,    85,   nil,    86,    86,    69,   135,    86,   nil,
   nil,   148,   nil,   210,   247,   342,   210,    62,   nil,    63,
    80,   nil,   nil,   195,   148,   nil,   149,   149,   nil,    27,
    13,   149,   347,   347,   360,   361,    87,   248,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   141,   nil,
   nil,   148,   nil,    86,   247,   247,   nil,   367,   nil,   247,
   nil,   nil,    27,    13,   363,   372,    86,    80,    82,   251,
   nil,     5,    82,   nil,   346,   346,   nil,   nil,    86,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   149,   nil,
   nil,   352,   352,    86,   248,   nil,   148,   nil,    85,   254,
   149,    62,    85,   nil,   nil,   210,   248,   nil,   207,   nil,
   nil,   207,   nil,    27,    13,   nil,   247,   251,    54,    54,
   nil,   nil,     5,    27,    13,   nil,    27,    13,   247,   nil,
   143,   nil,     5,    86,    86,     5,   nil,   nil,    86,   nil,
   nil,   nil,    82,   nil,   274,   nil,   nil,   254,   278,   nil,
   nil,   nil,   nil,   148,   nil,   nil,   nil,   251,   nil,   nil,
   146,   nil,   nil,    80,   249,   148,   nil,    80,   nil,   nil,
   nil,   nil,    85,   nil,   nil,   nil,   nil,   nil,   nil,   129,
   nil,   131,   132,   nil,   nil,   nil,   nil,   254,   nil,   nil,
   nil,   nil,   nil,   210,   nil,    86,   nil,   350,   350,   nil,
   207,   nil,   251,   nil,   nil,   164,   nil,    86,   nil,   nil,
   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   171,   141,   nil,   351,   351,   190,
   nil,   nil,   254,   191,   nil,   nil,   nil,    80,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,   nil,   251,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   251,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   207,   254,
   nil,   nil,   348,   348,   nil,   nil,   nil,   249,   nil,   nil,
   nil,   254,   nil,   nil,   nil,   nil,   263,   264,   265,   nil,
   267,   268,   269,   270,   271,   272,   273,   nil,   275,   276,
   277,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   249,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   249,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   164 ]

racc_goto_check = [
    38,    22,     2,    83,    29,    63,    55,    33,     4,    53,
    31,    86,    71,    48,    37,    51,    73,    33,    39,    67,
    38,    22,    24,    23,    22,    79,    55,    37,    42,    53,
    69,    42,    29,    38,    64,    61,    75,    43,    31,    32,
    58,     6,    38,    22,    36,     3,    38,    22,    66,    75,
     6,    29,    30,    54,     6,    55,    20,    31,     5,     8,
    20,    21,    58,     8,    21,    47,    47,    32,    62,    28,
    23,    22,    70,    59,    58,    72,    57,    55,    69,    74,
    30,    34,     3,    76,    37,    77,    32,     5,    64,    55,
    31,    78,    35,    80,    81,     3,    24,    28,    82,    30,
    71,     3,    41,    84,    67,    85,    36,     1,     5,   nil,
   nil,    50,   nil,   nil,   nil,   nil,    28,   nil,    69,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    55,    50,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,    29,   nil,
   nil,    29,    55,    31,    31,   nil,   nil,    31,    50,   nil,
   nil,    37,   nil,    69,    79,   nil,    39,    22,   nil,   nil,
    23,    22,   nil,   nil,   nil,    26,    53,   nil,   nil,     3,
   nil,   nil,    32,   nil,   nil,   nil,    32,   nil,    38,    22,
    48,    83,    51,    37,    86,    30,    29,    53,   nil,    30,
    73,    54,    31,    26,    37,    27,    61,   nil,    55,    29,
    55,   nil,    28,    28,    71,    31,    28,    38,    22,   nil,
    69,    29,    26,   nil,    53,    36,    53,    31,   nil,    65,
    54,    33,    69,    27,   nil,    54,    29,    55,    38,    22,
   nil,    22,    31,     5,    32,   nil,     5,    53,   nil,   nil,
   nil,   nil,    27,   nil,    50,    50,    32,    30,    50,   nil,
   nil,    28,   nil,    26,    53,    55,    26,     4,   nil,    30,
    25,   nil,   nil,    31,    28,   nil,    29,    29,   nil,    38,
    22,    29,    31,    31,    55,    55,    28,    31,    53,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,
   nil,    28,   nil,    50,    53,    53,   nil,    55,   nil,    53,
   nil,   nil,    38,    22,     2,    63,    50,    25,    26,    26,
   nil,    53,    26,   nil,    30,    30,   nil,   nil,    50,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,
   nil,    28,    28,    50,    31,   nil,    28,   nil,    27,    27,
    29,     4,    27,   nil,   nil,    26,    31,   nil,    25,   nil,
   nil,    25,   nil,    38,    22,   nil,    53,    26,    65,    65,
   nil,   nil,    53,    38,    22,   nil,    38,    22,    53,   nil,
    26,   nil,    53,    50,    50,    53,   nil,   nil,    50,   nil,
   nil,   nil,    26,   nil,    65,   nil,   nil,    27,    65,   nil,
   nil,   nil,   nil,    28,   nil,   nil,   nil,    26,   nil,   nil,
    27,   nil,   nil,    25,    25,    28,   nil,    25,   nil,   nil,
   nil,   nil,    27,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,    52,    52,   nil,   nil,   nil,   nil,    27,   nil,   nil,
   nil,   nil,   nil,    26,   nil,    50,   nil,    26,    26,   nil,
    25,   nil,    26,   nil,   nil,    52,   nil,    50,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    52,    25,   nil,    27,    27,    52,
   nil,   nil,    27,    52,   nil,   nil,   nil,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,   nil,    26,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    25,    27,
   nil,   nil,    25,    25,   nil,   nil,   nil,    25,   nil,   nil,
   nil,    27,   nil,   nil,   nil,   nil,    52,    52,    52,   nil,
    52,    52,    52,    52,    52,    52,    52,   nil,    52,    52,
    52,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    25,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    52 ]

racc_goto_pointer = [
   nil,   107,     2,    45,   -12,  -130,     8,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    14,    58,     1,     0,  -144,   247,   152,   182,    46,   -19,
    29,   -13,    16,     6,    30,   -48,    -7,  -128,     0,   -34,
   nil,    75,   -83,  -254,   nil,   nil,   nil,  -230,   -38,   nil,
    88,   -36,   384,     9,     1,   -23,   nil,  -158,   -38,  -259,
   nil,   -36,   -96,   -21,  -247,   211,  -167,  -196,   nil,  -137,
   -95,  -155,  -180,   -16,    47,    -1,   -51,    67,    35,     7,
   -65,   -28,   -24,  -119,  -122,     2,   -92,   nil ]

racc_goto_default = [
   nil,   nil,   279,   208,    25,   nil,    31,    35,     4,     7,
     9,    14,    16,    19,    21,    24,    28,    30,    34,     3,
     6,   nil,    98,   nil,    76,   101,   102,   105,   107,   108,
    93,    94,    96,    12,   nil,   nil,   nil,   nil,    83,   nil,
    33,   nil,   nil,   204,   291,   205,   206,   nil,   nil,   147,
   106,   109,    91,    64,   137,    97,   152,   153,   nil,   260,
   104,   nil,   nil,   nil,   nil,    67,   nil,   nil,   302,    77,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   nil,   197 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_3,
  2, 71, :_reduce_4,
  1, 74, :_reduce_5,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  3, 88, :_reduce_20,
  3, 88, :_reduce_21,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  4, 82, :_reduce_29,
  5, 82, :_reduce_30,
  3, 82, :_reduce_31,
  2, 82, :_reduce_32,
  1, 92, :_reduce_33,
  1, 92, :_reduce_34,
  3, 92, :_reduce_35,
  3, 92, :_reduce_36,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_45,
  5, 75, :_reduce_46,
  5, 75, :_reduce_47,
  5, 75, :_reduce_48,
  5, 86, :_reduce_49,
  2, 76, :_reduce_50,
  1, 109, :_reduce_51,
  2, 109, :_reduce_52,
  6, 77, :_reduce_53,
  2, 77, :_reduce_54,
  3, 110, :_reduce_55,
  3, 110, :_reduce_56,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 111, :_reduce_59,
  1, 112, :_reduce_none,
  3, 112, :_reduce_61,
  1, 113, :_reduce_62,
  1, 113, :_reduce_63,
  3, 114, :_reduce_64,
  3, 114, :_reduce_65,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  4, 117, :_reduce_68,
  1, 103, :_reduce_69,
  3, 103, :_reduce_70,
  0, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 119, :_reduce_73,
  1, 94, :_reduce_74,
  1, 96, :_reduce_75,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 78, :_reduce_83,
  3, 78, :_reduce_84,
  3, 87, :_reduce_85,
  0, 105, :_reduce_86,
  1, 105, :_reduce_87,
  3, 105, :_reduce_88,
  3, 123, :_reduce_89,
  3, 125, :_reduce_90,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  0, 108, :_reduce_93,
  1, 108, :_reduce_94,
  3, 108, :_reduce_95,
  1, 127, :_reduce_96,
  3, 127, :_reduce_97,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  1, 124, :_reduce_none,
  4, 98, :_reduce_116,
  3, 98, :_reduce_117,
  1, 100, :_reduce_118,
  2, 100, :_reduce_119,
  2, 130, :_reduce_120,
  1, 131, :_reduce_121,
  2, 131, :_reduce_122,
  1, 97, :_reduce_123,
  4, 91, :_reduce_124,
  4, 91, :_reduce_125,
  2, 80, :_reduce_126,
  5, 132, :_reduce_127,
  4, 132, :_reduce_128,
  0, 133, :_reduce_none,
  2, 133, :_reduce_130,
  4, 133, :_reduce_131,
  3, 133, :_reduce_132,
  1, 121, :_reduce_none,
  3, 121, :_reduce_134,
  3, 121, :_reduce_135,
  3, 121, :_reduce_136,
  3, 121, :_reduce_137,
  3, 121, :_reduce_138,
  3, 121, :_reduce_139,
  3, 121, :_reduce_140,
  3, 121, :_reduce_141,
  3, 121, :_reduce_142,
  2, 121, :_reduce_143,
  3, 121, :_reduce_144,
  3, 121, :_reduce_145,
  3, 121, :_reduce_146,
  3, 121, :_reduce_147,
  3, 121, :_reduce_148,
  3, 121, :_reduce_149,
  2, 121, :_reduce_150,
  3, 121, :_reduce_151,
  3, 121, :_reduce_152,
  3, 121, :_reduce_153,
  5, 79, :_reduce_154,
  1, 135, :_reduce_155,
  2, 135, :_reduce_156,
  5, 136, :_reduce_157,
  4, 136, :_reduce_158,
  1, 137, :_reduce_159,
  3, 137, :_reduce_160,
  3, 99, :_reduce_161,
  1, 139, :_reduce_none,
  4, 139, :_reduce_163,
  1, 141, :_reduce_none,
  3, 141, :_reduce_165,
  3, 140, :_reduce_166,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_175,
  1, 138, :_reduce_none,
  1, 142, :_reduce_177,
  1, 143, :_reduce_none,
  3, 143, :_reduce_179,
  2, 81, :_reduce_180,
  6, 83, :_reduce_181,
  5, 83, :_reduce_182,
  7, 84, :_reduce_183,
  6, 84, :_reduce_184,
  6, 85, :_reduce_185,
  5, 85, :_reduce_186,
  1, 107, :_reduce_187,
  1, 102, :_reduce_188,
  1, 102, :_reduce_189,
  1, 102, :_reduce_190,
  1, 146, :_reduce_191,
  3, 146, :_reduce_192,
  1, 148, :_reduce_193,
  1, 149, :_reduce_194,
  1, 149, :_reduce_195,
  1, 149, :_reduce_196,
  1, 149, :_reduce_none,
  0, 72, :_reduce_198,
  0, 150, :_reduce_199,
  1, 144, :_reduce_none,
  3, 144, :_reduce_201,
  3, 144, :_reduce_202,
  1, 151, :_reduce_none,
  3, 151, :_reduce_204,
  3, 152, :_reduce_205,
  1, 152, :_reduce_206,
  3, 152, :_reduce_207,
  1, 152, :_reduce_208,
  1, 147, :_reduce_none,
  2, 147, :_reduce_210,
  1, 145, :_reduce_none,
  2, 145, :_reduce_212,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 95, :_reduce_215,
  3, 120, :_reduce_216,
  4, 120, :_reduce_217,
  2, 120, :_reduce_218,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  0, 106, :_reduce_none,
  1, 106, :_reduce_222,
  1, 134, :_reduce_223,
  3, 129, :_reduce_224,
  4, 129, :_reduce_225,
  2, 129, :_reduce_226,
  1, 154, :_reduce_none,
  3, 154, :_reduce_228,
  3, 155, :_reduce_229,
  1, 156, :_reduce_230,
  1, 156, :_reduce_231,
  4, 122, :_reduce_232,
  1, 101, :_reduce_none,
  4, 101, :_reduce_234 ]

racc_reduce_n = 235

racc_shift_n = 386

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :IMPORT => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSNAME => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68 }

racc_nt_base = 69

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "IMPORT",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSNAME",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "$start",
  "program",
  "statements_and_declarations",
  "nil",
  "statement_or_declaration",
  "statements",
  "resource",
  "virtualresource",
  "collection",
  "assignment",
  "casestatement",
  "ifstatement_begin",
  "import",
  "fstatement",
  "definition",
  "hostclass",
  "nodedef",
  "resourceoverride",
  "append",
  "relationship",
  "relationship_side",
  "edge",
  "resourceref",
  "funcvalues",
  "namestring",
  "name",
  "variable",
  "type",
  "boolean",
  "funcrvalue",
  "selector",
  "quotedtext",
  "hasharrayaccesses",
  "classname",
  "resourceinstances",
  "endsemi",
  "params",
  "endcomma",
  "classref",
  "anyparams",
  "at",
  "collectrhand",
  "collstatements",
  "collstatement",
  "colljoin",
  "collexpr",
  "colllval",
  "simplervalue",
  "resourceinst",
  "resourcename",
  "undef",
  "array",
  "expression",
  "hasharrayaccess",
  "param",
  "rvalue",
  "addparam",
  "anyparam",
  "rvalues",
  "comma",
  "hash",
  "dqrval",
  "dqtail",
  "ifstatement",
  "else",
  "regex",
  "caseopts",
  "caseopt",
  "casevalues",
  "selectlhand",
  "svalues",
  "selectval",
  "sintvalues",
  "string",
  "strings",
  "argumentlist",
  "classparent",
  "hostnames",
  "nodeparent",
  "nodename",
  "hostname",
  "nothing",
  "arguments",
  "argument",
  "classnameordefault",
  "hashpairs",
  "hashpair",
  "key" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'grammar.ra', 34)
  def _reduce_3(val, _values, result)
        result = ast AST::ASTArray, :children => (val[0] ? [val[0]] : [])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 37)
  def _reduce_4(val, _values, result)
        if val[1]
      val[0].push(val[1])
    end
    result = val[0]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 46)
  def _reduce_5(val, _values, result)
      val[0].each do |stmt|
    if stmt.is_a?(AST::TopLevelConstruct)
      error "Classes, definitions, and nodes may only appear at toplevel or inside other classes", \
          :line => stmt.context[:line], :file => stmt.context[:file]
    end
  end
  result = val[0]

    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'grammar.ra', 72)
  def _reduce_20(val, _values, result)
      result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 75)
  def _reduce_21(val, _values, result)
        result = AST::Relationship.new(val[0], val[2], val[1][:value], ast_context)

    result
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.ra', 83)
  def _reduce_29(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 90)
  def _reduce_30(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[2],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 96)
  def _reduce_31(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 103)
  def _reduce_32(val, _values, result)
        result = ast AST::Function,
    :name => val[0][:value],
    :line => val[0][:line],
    :arguments => val[1],
    :ftype => :statement

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 113)
  def _reduce_35(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 117)
  def _reduce_36(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'grammar.ra', 132)
  def _reduce_45(val, _values, result)
        result = ast AST::Name, :value => val[0][:value]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 136)
  def _reduce_46(val, _values, result)
      @lexer.commentpop
  result = ast(AST::Resource, :type => val[0], :instances => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 139)
  def _reduce_47(val, _values, result)
      # This is a deprecated syntax.
  error "All resource specifications require names"

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 142)
  def _reduce_48(val, _values, result)
      # a defaults setting for a type
  @lexer.commentpop
  result = ast(AST::ResourceDefaults, :type => val[0], :parameters => val[2])

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 149)
  def _reduce_49(val, _values, result)
      @lexer.commentpop
  result = ast AST::ResourceOverride, :object => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 156)
  def _reduce_50(val, _values, result)
      type = val[0]

  if (type == :exported and ! Puppet[:storeconfigs])
    Puppet.warning addcontext("You cannot collect without storeconfigs being set")
  end

  error "Defaults are not virtualizable" if val[1].is_a? AST::ResourceDefaults

  method = type.to_s + "="

  # Just mark our resource as exported and pass it through.
  val[1].send(method, true)

  result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 172)
  def _reduce_51(val, _values, result)
     result = :virtual 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 173)
  def _reduce_52(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 178)
  def _reduce_53(val, _values, result)
      @lexer.commentpop
  Puppet.warning addcontext("Collection names must now be capitalized") if val[0] =~ /^[a-z]/
  type = val[0].downcase
  args = {:type => type}

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  args[:override] = val[3]
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 197)
  def _reduce_54(val, _values, result)
        if val[0] =~ /^[a-z]/
    Puppet.warning addcontext("Collection names must now be capitalized")
  end
  type = val[0].downcase
  args = {:type => type }

  if val[1].is_a?(AST::CollExpr)
    args[:query] = val[1]
    args[:query].type = type
    args[:form] = args[:query].form
  else
    args[:form] = val[1]
  end
  if args[:form] == :exported and ! Puppet[:storeconfigs]
    Puppet.warning addcontext("You cannot collect exported resources without storeconfigs being set; the collection will be ignored")
  end
  result = ast AST::Collection, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 218)
  def _reduce_55(val, _values, result)
      if val[1]
    result = val[1]
    result.form = :virtual
  else
    result = :virtual
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 226)
  def _reduce_56(val, _values, result)
        if val[1]
    result = val[1]
    result.form = :exported
  else
    result = :exported
  end

    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'grammar.ra', 239)
  def _reduce_59(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1], :test2 => val[2]

    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'grammar.ra', 244)
  def _reduce_61(val, _values, result)
        result = val[1]
    result.parens = true

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 248)
  def _reduce_62(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 249)
  def _reduce_63(val, _values, result)
     result=val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 252)
  def _reduce_64(val, _values, result)
      result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
  #result = ast AST::CollExpr
  #result.push *val

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 257)
  def _reduce_65(val, _values, result)
        result = ast AST::CollExpr, :test1 => val[0], :oper => val[1][:value], :test2 => val[2]
    #result = ast AST::CollExpr
    #result.push *val

    result
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

module_eval(<<'.,.,', 'grammar.ra', 266)
  def _reduce_68(val, _values, result)
      result = ast AST::ResourceInstance, :title => val[0], :parameters => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 269)
  def _reduce_69(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 271)
  def _reduce_70(val, _values, result)
        val[0].push val[2]
    result = val[0]

    result
  end
.,.,

# reduce 71 omitted

# reduce 72 omitted

module_eval(<<'.,.,', 'grammar.ra', 279)
  def _reduce_73(val, _values, result)
      result = ast AST::Undef, :value => :undef

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 283)
  def _reduce_74(val, _values, result)
      result = ast AST::Name, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 287)
  def _reduce_75(val, _values, result)
      result = ast AST::Type, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

module_eval(<<'.,.,', 'grammar.ra', 299)
  def _reduce_83(val, _values, result)
      raise Puppet::ParseError, "Cannot assign to variables in other namespaces" if val[0][:value] =~ /::/
  # this is distinct from referencing a variable
  variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 305)
  def _reduce_84(val, _values, result)
        result = ast AST::VarDef, :name => val[0], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 309)
  def _reduce_85(val, _values, result)
      variable = ast AST::Name, :value => val[0][:value], :line => val[0][:line]
  result = ast AST::VarDef, :name => variable, :value => val[2], :append => true, :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 315)
  def _reduce_86(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 317)
  def _reduce_87(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 319)
  def _reduce_88(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 324)
  def _reduce_89(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 328)
  def _reduce_90(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0][:value], :line => val[0][:line], :value => val[2],
    :add => true

    result
  end
.,.,

# reduce 91 omitted

# reduce 92 omitted

module_eval(<<'.,.,', 'grammar.ra', 337)
  def _reduce_93(val, _values, result)
      result = ast AST::ASTArray

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 339)
  def _reduce_94(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 341)
  def _reduce_95(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 345)
  def _reduce_96(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 346)
  def _reduce_97(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'grammar.ra', 370)
  def _reduce_116(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => val[2],
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 375)
  def _reduce_117(val, _values, result)
      result = ast AST::Function,
    :name => val[0][:value], :line => val[0][:line],
    :arguments => AST::ASTArray.new({}),
    :ftype => :rvalue

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 381)
  def _reduce_118(val, _values, result)
     result = ast AST::String, :value => val[0][:value],                  :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 382)
  def _reduce_119(val, _values, result)
     result = ast AST::Concat, :value => [ast(AST::String,val[0])]+val[1], :line => val[0][:line] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 384)
  def _reduce_120(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 386)
  def _reduce_121(val, _values, result)
     result = [ast(AST::String,val[0])]          
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 387)
  def _reduce_122(val, _values, result)
     result = [ast(AST::String,val[0])] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 390)
  def _reduce_123(val, _values, result)
      result = ast AST::Boolean, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 394)
  def _reduce_124(val, _values, result)
      Puppet.warning addcontext("Deprecation notice:  Resource references should now be capitalized")
  result = ast AST::ResourceReference, :type => val[0][:value], :line => val[0][:line], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 397)
  def _reduce_125(val, _values, result)
      result = ast AST::ResourceReference, :type => val[0], :title => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 401)
  def _reduce_126(val, _values, result)
      result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 405)
  def _reduce_127(val, _values, result)
      @lexer.commentpop
  args = {
    :test => val[0],
    :statements => val[2]
  }

  args[:else] = val[4] if val[4]

  result = ast AST::IfStatement, args

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 416)
  def _reduce_128(val, _values, result)
        @lexer.commentpop
    args = {
      :test => val[0],
      :statements => ast(AST::Nop)
  }

  args[:else] = val[3] if val[3]

  result = ast AST::IfStatement, args

    result
  end
.,.,

# reduce 129 omitted

module_eval(<<'.,.,', 'grammar.ra', 429)
  def _reduce_130(val, _values, result)
        result = ast AST::Else, :statements => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 432)
  def _reduce_131(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 436)
  def _reduce_132(val, _values, result)
        @lexer.commentpop
    result = ast AST::Else, :statements => ast(AST::Nop)

    result
  end
.,.,

# reduce 133 omitted

module_eval(<<'.,.,', 'grammar.ra', 454)
  def _reduce_134(val, _values, result)
        result = ast AST::InOperator, :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 457)
  def _reduce_135(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 460)
  def _reduce_136(val, _values, result)
        result = ast AST::MatchOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 463)
  def _reduce_137(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 466)
  def _reduce_138(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 469)
  def _reduce_139(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 472)
  def _reduce_140(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 475)
  def _reduce_141(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 478)
  def _reduce_142(val, _values, result)
        result = ast AST::ArithmeticOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 481)
  def _reduce_143(val, _values, result)
        result = ast AST::Minus, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 484)
  def _reduce_144(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 487)
  def _reduce_145(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 490)
  def _reduce_146(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 493)
  def _reduce_147(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 496)
  def _reduce_148(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 499)
  def _reduce_149(val, _values, result)
        result = ast AST::ComparisonOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 502)
  def _reduce_150(val, _values, result)
        result = ast AST::Not, :value => val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 505)
  def _reduce_151(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 508)
  def _reduce_152(val, _values, result)
        result = ast AST::BooleanOperator, :operator => val[1][:value], :lval => val[0], :rval => val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 511)
  def _reduce_153(val, _values, result)
        result = val[1]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 515)
  def _reduce_154(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseStatement, :test => val[1], :options => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 519)
  def _reduce_155(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 521)
  def _reduce_156(val, _values, result)
        val[0].push val[1]
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 526)
  def _reduce_157(val, _values, result)
      @lexer.commentpop
  result = ast AST::CaseOpt, :value => val[0], :statements => val[3]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 529)
  def _reduce_158(val, _values, result)
      @lexer.commentpop

    result = ast(
    AST::CaseOpt,
    :value => val[0],

    :statements => ast(AST::ASTArray)
  )

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 539)
  def _reduce_159(val, _values, result)
     result = aryfy(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 541)
  def _reduce_160(val, _values, result)
        val[0].push(val[2])
    result = val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 546)
  def _reduce_161(val, _values, result)
      result = ast AST::Selector, :param => val[0], :values => val[2]

    result
  end
.,.,

# reduce 162 omitted

module_eval(<<'.,.,', 'grammar.ra', 551)
  def _reduce_163(val, _values, result)
        @lexer.commentpop
    result = val[1]

    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'grammar.ra', 557)
  def _reduce_165(val, _values, result)
        if val[0].instance_of?(AST::ASTArray)
    val[0].push(val[2])
    result = val[0]
  else
    result = ast AST::ASTArray, :children => [val[0],val[2]]
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 566)
  def _reduce_166(val, _values, result)
      result = ast AST::ResourceParam, :param => val[0], :value => val[2]

    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

module_eval(<<'.,.,', 'grammar.ra', 578)
  def _reduce_175(val, _values, result)
        result = ast AST::Default, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

# reduce 176 omitted

module_eval(<<'.,.,', 'grammar.ra', 583)
  def _reduce_177(val, _values, result)
     result = [val[0][:value]] 
    result
  end
.,.,

# reduce 178 omitted

module_eval(<<'.,.,', 'grammar.ra', 585)
  def _reduce_179(val, _values, result)
     result = val[0] += val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 588)
  def _reduce_180(val, _values, result)
      val[1].each do |file|
    import(file)
  end

  result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 598)
  def _reduce_181(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :code => val[4],
                                                                       :line => val[0][:line]))
  @lexer.indefine = false

#}           | DEFINE NAME argumentlist parent LBRACE RBRACE {

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 606)
  def _reduce_182(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Definition.new(classname(val[1]),
                                               ast_context(true).merge(:arguments => val[2], :line => val[0][:line]))
  @lexer.indefine = false

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 614)
  def _reduce_183(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :code => val[5], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 621)
  def _reduce_184(val, _values, result)
      @lexer.commentpop
  # Our class gets defined in the parent namespace, not our own.
  @lexer.namepop
  result = Puppet::Parser::AST::Hostclass.new(classname(val[1]),
                                              ast_context(true).merge(:arguments => val[2], :parent => val[3],
                                                                      :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 630)
  def _reduce_185(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1],
                                         ast_context(true).merge(:parent => val[2], :code => val[4],
                                                                 :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 635)
  def _reduce_186(val, _values, result)
      @lexer.commentpop
  result = Puppet::Parser::AST::Node.new(val[1], ast_context(true).merge(:parent => val[2], :line => val[0][:line]))

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 639)
  def _reduce_187(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 641)
  def _reduce_188(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 642)
  def _reduce_189(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 643)
  def _reduce_190(val, _values, result)
     result = "class" 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 648)
  def _reduce_191(val, _values, result)
        result = [result]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 651)
  def _reduce_192(val, _values, result)
        result = val[0]
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 656)
  def _reduce_193(val, _values, result)
      result = ast AST::HostName, :value => val[0]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 659)
  def _reduce_194(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 660)
  def _reduce_195(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 661)
  def _reduce_196(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

# reduce 197 omitted

module_eval(<<'.,.,', 'grammar.ra', 665)
  def _reduce_198(val, _values, result)
      result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 669)
  def _reduce_199(val, _values, result)
      result = ast AST::ASTArray, :children => []

    result
  end
.,.,

# reduce 200 omitted

module_eval(<<'.,.,', 'grammar.ra', 674)
  def _reduce_201(val, _values, result)
        result = nil

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 677)
  def _reduce_202(val, _values, result)
        result = val[1]
    result = [result] unless result[0].is_a?(Array)

    result
  end
.,.,

# reduce 203 omitted

module_eval(<<'.,.,', 'grammar.ra', 683)
  def _reduce_204(val, _values, result)
        result = val[0]
    result = [result] unless result[0].is_a?(Array)
    result << val[2]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 689)
  def _reduce_205(val, _values, result)
      Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
  result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 693)
  def _reduce_206(val, _values, result)
        Puppet.warning addcontext("Deprecation notice: must now include '$' in prototype")
    result = [val[0][:value]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 696)
  def _reduce_207(val, _values, result)
      result = [val[0][:value], val[2]]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 698)
  def _reduce_208(val, _values, result)
      result = [val[0][:value]]

    result
  end
.,.,

# reduce 209 omitted

module_eval(<<'.,.,', 'grammar.ra', 703)
  def _reduce_210(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'grammar.ra', 708)
  def _reduce_212(val, _values, result)
        result = val[1]

    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

module_eval(<<'.,.,', 'grammar.ra', 714)
  def _reduce_215(val, _values, result)
      result = ast AST::Variable, :value => val[0][:value], :line => val[0][:line]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 717)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 718)
  def _reduce_217(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 719)
  def _reduce_218(val, _values, result)
     result = ast AST::ASTArray 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'grammar.ra', 725)
  def _reduce_222(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 728)
  def _reduce_223(val, _values, result)
      result = ast AST::Regex, :value => val[0][:value]

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 732)
  def _reduce_224(val, _values, result)
      if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 739)
  def _reduce_225(val, _values, result)
        if val[1].instance_of?(AST::ASTHash)
    result = val[1]
  else
    result = ast AST::ASTHash, { :value => val[1] }
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 745)
  def _reduce_226(val, _values, result)
      result = ast AST::ASTHash

    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'grammar.ra', 750)
  def _reduce_228(val, _values, result)
        if val[0].instance_of?(AST::ASTHash)
    result = val[0].merge(val[2])
  else
    result = ast AST::ASTHash, :value => val[0]
    result.merge(val[2])
  end

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 759)
  def _reduce_229(val, _values, result)
      result = ast AST::ASTHash, { :value => { val[0] => val[2] } }

    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 762)
  def _reduce_230(val, _values, result)
     result = val[0][:value] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 763)
  def _reduce_231(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.ra', 766)
  def _reduce_232(val, _values, result)
      result = ast AST::HashOrArrayAccess, :variable => val[0][:value], :key => val[2]

    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'grammar.ra', 771)
  def _reduce_234(val, _values, result)
        result = ast AST::HashOrArrayAccess, :variable => val[0], :key => val[2]

    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Parser
  end   # module Puppet
